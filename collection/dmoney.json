{
	"info": {
		"_postman_id": "451196e5-362b-4711-bc8c-1fa74b3c3723",
		"name": "Dmoney",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24414195",
		"_collection_link": "https://planetary-meadow-699494.postman.co/workspace/Assignments-SDET~5c289f8c-70df-4295-98d1-8f23cd325905/collection/24414195-451196e5-362b-4711-bc8c-1fa74b3c3723?action=share&creator=24414195&source=collection_link"
	},
	"item": [
		{
			"name": "Admin Login",
			"item": [
				{
					"name": "Admin can Login with valid creds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"token\",jsonData.token)\r",
									"pm.environment.set(\"token\",jsonData.token)\r",
									"\r",
									"pm.test(\"Login is successful\",()=>{\r",
									"    var jsonData= pm.response.json();\r",
									"    var message= jsonData.message;\r",
									"    console.log(\"message\")\r",
									"    pm.expect(message).contains(\"Login successfully\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The role is showing\", function () {\r",
									"   var jsonData= pm.response.json();\r",
									"    var actual_role= jsonData.role;\r",
									"    pm.expect(actual_role).not.equal(null)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"admin1@roadtocareer.net\",\r\n    \"password\":\"1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin can't Login with invalid creds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Password incorrect\",()=>{\r",
									"    var jsonData= pm.response.json();\r",
									"    var message= jsonData.message;\r",
									"    pm.expect(message).contains(\"Password incorrect\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"admin1@roadtocareer.net\",\r\n    \"password\":\"12345\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin creates agent",
			"item": [
				{
					"name": "Admin creates agent with unique phone and nid number",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var prefix=\"0150\";\r",
									"var nid_prefix = \"1100\";\r",
									"var randomNumber =_.random(1000000,9999999)\r",
									"var user_phone_number = prefix+randomNumber;\r",
									"\r",
									"var nid = nid_prefix+randomNumber;\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"phone_number_agent\", user_phone_number)\r",
									"pm.collectionVariables.set(\"nid_agent\", nid)\r",
									"\r",
									"pm.environment.set(\"phone_number_agent\", user_phone_number)\r",
									"pm.environment.set(\"nid_agent\", nid)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"agentno\",jsonData.user.phone_number)\r",
									"pm.environment.set(\"agentno\",jsonData.user.phone_number)\r",
									"\r",
									"pm.test(\"User created\",()=>{\r",
									"    var jsonData= pm.response.json();\r",
									"    var message= jsonData.message;\r",
									"    pm.expect(message).contains(\"User created\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"password\":\"1234\",\r\n    \"phone_number\":\"{{phone_number_agent}}\",\r\n    \"nid\":\"{{nid_agent}}\",\r\n    \"role\":\"Agent\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin can not  create agent with existing phone number",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var prefix=\"0150\";\r",
									"var nid_prefix = \"1100\";\r",
									"var randomNumber =_.random(1000000,9999999)\r",
									"var user_phone_number = prefix+randomNumber;\r",
									"\r",
									"var nid = nid_prefix + randomNumber;\r",
									"pm.variables.get(\"existing_nid\",nid);\r",
									"\r",
									"\r",
									"//pm.collectionVariables.set(\"phone_number_agent\", user_phone_number)\r",
									"//pm.collectionVariables.set(\"nid_agent\", nid)\r",
									"\r",
									"//pm.environment.set(\"phone_number_agent\", user_phone_number)\r",
									"//pm.environment.set(\"nid_agent\", nid)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User already exists\",()=>{\r",
									"    var jsonData= pm.response.json();\r",
									"    var message= jsonData.message;\r",
									"    pm.expect(message).contains(\"User already exists\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 208\", function () {\r",
									"    pm.response.to.have.status(208);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"password\":\"1234\",\r\n    \"phone_number\":\"{{phone_number_agent}}\",\r\n    \"nid\":\"{{nid}}\",\r\n    \"role\":\"Agent\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin can not  create agent with existing nid number",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var prefix=\"0150\";\r",
									"var randomNumber =_.random(1000000,9999999)\r",
									"var user_phone_number = prefix+randomNumber;\r",
									"pm.variables.get(\"phone_number_agent\", user_phone_number);\r",
									"\r",
									"//var nid = nid_prefix + randomNumber;\r",
									"\r",
									"\r",
									"\r",
									"//pm.collectionVariables.set(\"phone_number_agent\", user_phone_number)\r",
									"//pm.collectionVariables.set(\"nid_agent\", nid)\r",
									"\r",
									"//pm.environment.set(\"phone_number_agent\", user_phone_number)\r",
									"//pm.environment.set(\"nid_agent\", nid)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User already exists\",()=>{\r",
									"    var jsonData= pm.response.json();\r",
									"    var message= jsonData.message;\r",
									"    pm.expect(message).contains(\"User already exists\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 208\", function () {\r",
									"    pm.response.to.have.status(208);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"password\":\"1234\",\r\n    \"phone_number\":\"{{phone_number_agent}}\",\r\n    \"nid\":\"{{nid}}\",\r\n    \"role\":\"Agent\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin can not create agent without token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var prefix=\"0150\";\r",
									"var nid_prefix = \"1100\";\r",
									"var randomNumber =_.random(1000000,9999999)\r",
									"var user_phone_number = prefix+randomNumber;\r",
									"\r",
									"var nid = nid_prefix+randomNumber;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Token expired\",()=>{\r",
									"    var jsonData= pm.response.json();\r",
									"    var message= jsonData.error.message;\r",
									"    pm.expect(message).contains(\"No Token Found!\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"password\":\"1234\",\r\n    \"phone_number\":\"{{phone_number_agent}}\",\r\n    \"nid\":\"{{nid_agent}}\",\r\n    \"role\":\"Agent\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin can not create agent without secret key",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Secret key is not given\",()=>{\r",
									"    var jsonData= pm.response.json();\r",
									"    var message= jsonData.error.message;\r",
									"    pm.expect(message).contains(\"Secret auth key validation failure!\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"password\":\"1234\",\r\n    \"phone_number\":\"{{phone_number_agent}}\",\r\n    \"nid\":\"{{nid_agent}}\",\r\n    \"role\":\"Agent\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin creates customer",
			"item": [
				{
					"name": "Admin creates customer 01",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var prefix=\"0150\";\r",
									"var nid_prefix = \"1100\";\r",
									"var randomNumber =_.random(1000000,9999999)\r",
									"var user_phone_number = prefix+randomNumber;\r",
									"\r",
									"var nid = nid_prefix+randomNumber;\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"phone_number_c01\", user_phone_number)\r",
									"pm.collectionVariables.set(\"nid_c01\", nid)\r",
									"\r",
									"pm.environment.set(\"phone_number_c01\", user_phone_number)\r",
									"pm.environment.set(\"nid_c01\", nid)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"customer01\",jsonData.user.phone_number)\r",
									"pm.environment.set(\"customer01\",jsonData.user.phone_number)\r",
									"\r",
									"\r",
									"pm.test(\"User created\",()=>{\r",
									"    var jsonData= pm.response.json();\r",
									"    var message= jsonData.message;\r",
									"    pm.expect(message).contains(\"User created\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"The role is showing\", function () {\r",
									"   var jsonData= pm.response.json();\r",
									"    var actual_role= jsonData.user.role;\r",
									"    pm.expect(actual_role).not.equal(null)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"password\":\"1234\",\r\n    \"phone_number\":\"{{phone_number_c01}}\",\r\n    \"nid\":\"{{nid_c01}}\",\r\n    \"role\":\"Customer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin creates customer 02",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var prefix=\"0150\";\r",
									"var nid_prefix = \"1100\";\r",
									"var randomNumber =_.random(1000000,9999999)\r",
									"var user_phone_number = prefix+randomNumber;\r",
									"\r",
									"var nid = nid_prefix+randomNumber;\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"phone_number_c02\", user_phone_number)\r",
									"pm.collectionVariables.set(\"nid-c02\", nid)\r",
									"\r",
									"pm.environment.set(\"phone_number_c02\", user_phone_number)\r",
									"pm.environment.set(\"nid_c02\", nid)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"customer02\",jsonData.user.phone_number)\r",
									"pm.environment.set(\"customer02\",jsonData.user.phone_number)\r",
									"\r",
									"\r",
									"pm.test(\"User created\",()=>{\r",
									"    var jsonData= pm.response.json();\r",
									"    var message= jsonData.message;\r",
									"    pm.expect(message).contains(\"User created\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"The role is showing\", function () {\r",
									"   var jsonData= pm.response.json();\r",
									"    var actual_role= jsonData.user.role;\r",
									"    pm.expect(actual_role).not.equal(null)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"password\":\"1234\",\r\n    \"phone_number\":\"{{phone_number_c02}}\",\r\n    \"nid\":\"{{nid_c02}}\",\r\n    \"role\":\"Customer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin can not create customer  with existing phone number",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//var prefix=\"0150\";\r",
									"var nid_prefix = \"1100\";\r",
									"var randomNumber =_.random(1000000,9999999)\r",
									"//var user_phone_number = prefix+randomNumber;\r",
									"\r",
									"var nid = nid_prefix+randomNumber;\r",
									"pm.variables.get(\"nid_c01\", nid);\r",
									"\r",
									"//pm.collectionVariables.set(\"phone_number_c01\", user_phone_number)\r",
									"// pm.collectionVariables.set(\"nid_c01\", nid)\r",
									"\r",
									"//pm.environment.set(\"phone_number_c01\", user_phone_number)\r",
									"// pm.environment.set(\"nid_c01\", nid)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if customer already exists\",()=>{\r",
									"    var jsonData= pm.response.json();\r",
									"    var message= jsonData.message;\r",
									"    pm.expect(message).contains(\"User already exists\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 208\", function () {\r",
									"    pm.response.to.have.status(208);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"password\":\"1234\",\r\n    \"phone_number\":\"{{phone_number_c01}}\",\r\n    \"nid\":\"{{nid_c01}}\",\r\n    \"role\":\"Customer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin can not create customer with existing nid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var prefix=\"0150\";\r",
									"//var nid_prefix = \"1100\";\r",
									"var randomNumber =_.random(1000000,9999999)\r",
									"var user_phone_number = prefix+randomNumber;\r",
									"pm.variables.get(\"phone_number_c01\", user_phone_number);\r",
									"\r",
									"//var nid = nid_prefix+randomNumber;\r",
									"\r",
									"\r",
									"//pm.collectionVariables.set(\"phone_number_c01\", user_phone_number)\r",
									"//pm.collectionVariables.set(\"nid_c01\", nid)\r",
									"\r",
									"//pm.environment.set(\"phone_number_c01\", user_phone_number)\r",
									"//pm.environment.set(\"nid_c01\", nid)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if admin can create multiple customers with same nid\",()=>{\r",
									"    var jsonData= pm.response.json();\r",
									"    var message= jsonData.message;\r",
									"    pm.expect(message).contains(\"User already exists\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 208\", function () {\r",
									"    pm.response.to.have.status(208);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"password\":\"1234\",\r\n    \"phone_number\":\"{{phone_number_c01}}\",\r\n    \"nid\":\"{{nid_c01}}\",\r\n    \"role\":\"Customer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin can not create customer without token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Token expired\",()=>{\r",
									"    var jsonData= pm.response.json();\r",
									"    var message= jsonData.error.message;\r",
									"    pm.expect(message).contains(\"No Token Found!\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"password\":\"1234\",\r\n    \"phone_number\":\"{{phone_number_c01}}\",\r\n    \"nid\":\"{{nid_c01}}\",\r\n    \"role\":\"Customer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin can not create customer without secret key",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Secret key is not given\",()=>{\r",
									"    var jsonData= pm.response.json();\r",
									"    var message= jsonData.error.message;\r",
									"    pm.expect(message).contains(\"Secret auth key validation failure!\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"password\":\"1234\",\r\n    \"phone_number\":\"{{phone_number_c01}}\",\r\n    \"nid\":\"{{nid_c01}}\",\r\n    \"role\":\"Customer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Deposit from system to agent",
			"item": [
				{
					"name": "Deposit money from system to agent within 10-10,000 tk",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Deposit successful\",()=>{\r",
									"    var jsonData= pm.response.json();\r",
									"    var message= jsonData.message;\r",
									"    console.log(\"message\")\r",
									"    pm.expect(message).contains(\"Deposit successful\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"The transaction id is showing\", function () {\r",
									"   var jsonData= pm.response.json();\r",
									"    var tid = jsonData.trnxId;\r",
									"    pm.expect(tid).not.equal(null)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"SYSTEM\",\r\n    \"to_account\":\"{{agentno}}\",\r\n    \"amount\":10000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/deposit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Can not deposit money from system to agent more than 10,000 tk",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Limit exceeded\",()=>{\r",
									"    var jsonData= pm.response.json();\r",
									"    var message= jsonData.message;\r",
									"    pm.expect(message).contains(\"Maximum limit exceeded. You cant deposit more than 10000 tk\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 208\", function () {\r",
									"    pm.response.to.have.status(208);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"SYSTEM\",\r\n    \"to_account\":\"{{agentno}}\",\r\n    \"amount\":10000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/deposit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Can not deposit money from system to agent less than 10 tk",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Limit exceeded\",()=>{\r",
									"    var jsonData= pm.response.json();\r",
									"    var message= jsonData.message;\r",
									"    pm.expect(message).contains(\"Minimum deposit amount 10 tk and maximum deposit amount 10000 tk\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 208\", function () {\r",
									"    pm.response.to.have.status(208);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"SYSTEM\",\r\n    \"to_account\":\"{{agentno}}\",\r\n    \"amount\":9\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/deposit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Can not deposit money from system to agent  without token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Token expired\",()=>{\r",
									"    var jsonData= pm.response.json();\r",
									"    var message= jsonData.error.message;\r",
									"    pm.expect(message).contains(\"No Token Found!\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"SYSTEM\",\r\n    \"to_account\":\"{{agentno}}\",\r\n    \"amount\":9\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/deposit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Can not deposit money from system to agent without secret key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Secret key is not given\",()=>{\r",
									"    var jsonData= pm.response.json();\r",
									"    var message= jsonData.error.message;\r",
									"    pm.expect(message).contains(\"Secret auth key validation failure!\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"SYSTEM\",\r\n    \"to_account\":\"{{agentno}}\",\r\n    \"amount\":9\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/deposit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Deposit to customer 1 by agent",
			"item": [
				{
					"name": "Deposit money to Customer 1 by agent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Deposit successful\",()=>{\r",
									"    var jsonData= pm.response.json();\r",
									"    var message= jsonData.message;\r",
									"    console.log(\"message\")\r",
									"    pm.expect(message).contains(\"Deposit successful\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"The transaction id is showing\", function () {\r",
									"   var jsonData= pm.response.json();\r",
									"    var tid = jsonData.trnxId;\r",
									"    pm.expect(tid).not.equal(null)\r",
									"});\r",
									"\r",
									"pm.test(\"The commission is showing\", function () {\r",
									"   var jsonData= pm.response.json();\r",
									"    var cmn = jsonData.commission;\r",
									"    pm.expect(cmn).not.equal(null)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"{{agentno}}\",\r\n    \"to_account\":\"{{phone_number_c01}}\",\r\n    \"amount\":2000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/deposit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Can not deposit money to Customer 1 by agent with insufficient fund",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Insufficient fund\",()=>{\r",
									"    var jsonData= pm.response.json();\r",
									"    var message= jsonData.message;\r",
									"    pm.expect(message).contains(\"Insufficient balance\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 208\", function () {\r",
									"    pm.response.to.have.status(208);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"{{agentno}}\",\r\n    \"to_account\":\"{{phone_number_c01}}\",\r\n    \"amount\":200000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/deposit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Agent checks balance",
			"item": [
				{
					"name": "Check balance by agent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User balance\",()=>{\r",
									"    var jsonData= pm.response.json();\r",
									"    var message= jsonData.message;\r",
									"    console.log(\"message\")\r",
									"    pm.expect(message).contains(\"User balance\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The balance is showing\", function () {\r",
									"   var jsonData= pm.response.json();\r",
									"    var balance= jsonData.role;\r",
									"    pm.expect(balance).not.equal(null)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transaction/balance/{{agentno}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"balance",
								"{{agentno}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Can not check balance by agent without token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Token expired\",()=>{\r",
									"    var jsonData= pm.response.json();\r",
									"    var message= jsonData.error.message;\r",
									"    pm.expect(message).contains(\"No Token Found!\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transaction/balance/{{agentno}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"balance",
								"{{agentno}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Can not check balance by agent without secret key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Token expired\",()=>{\r",
									"    var jsonData= pm.response.json();\r",
									"    var message= jsonData.error.message;\r",
									"    pm.expect(message).contains(\"Secret auth key validation failure!\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "ROADTOSDET",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transaction/balance/{{agentno}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"balance",
								"{{agentno}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Withdraw by Customer",
			"item": [
				{
					"name": "Withdraw by customer 1 from agent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Withdraw successful\",()=>{\r",
									"    var jsonData= pm.response.json();\r",
									"    var message= jsonData.message;\r",
									"    console.log(\"message\")\r",
									"    pm.expect(message).contains(\"Withdraw successful\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"The transaction id is showing\", function () {\r",
									"   var jsonData= pm.response.json();\r",
									"    var tid = jsonData.trnxId;\r",
									"    pm.expect(tid).not.equal(null)\r",
									"});\r",
									"\r",
									"pm.test(\"The fee is showing\", function () {\r",
									"   var jsonData= pm.response.json();\r",
									"    var fees = jsonData.fee;\r",
									"    pm.expect(fees).not.equal(null)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "{{secretkeyname}}",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"{{customer01}}\",\r\n    \"to_account\":\"{{agentno}}\",\r\n    \"amount\":500\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/withdraw",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"withdraw"
							]
						}
					},
					"response": []
				},
				{
					"name": "Can not withdraw by customer 1 from agent with insuficient fund",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Insufficient fund\",()=>{\r",
									"    var jsonData= pm.response.json();\r",
									"    var message= jsonData.message;\r",
									"    pm.expect(message).contains(\"Insufficient balance\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 208\", function () {\r",
									"    pm.response.to.have.status(208);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "{{secretkeyname}}",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"{{customer01}}\",\r\n    \"to_account\":\"{{agentno}}\",\r\n    \"amount\":50000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/withdraw",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"withdraw"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Customer 1 balance check",
			"item": [
				{
					"name": "Check balance by customer 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User balance\",()=>{\r",
									"    var jsonData= pm.response.json();\r",
									"    var message= jsonData.message;\r",
									"    console.log(\"message\")\r",
									"    pm.expect(message).contains(\"User balance\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The balance is showing\", function () {\r",
									"   var jsonData= pm.response.json();\r",
									"    var balance= jsonData.balance;\r",
									"    pm.expect(balance).not.equal(null)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "{{secretkeyname}}",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/balance/{{phone_number_c01}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"balance",
								"{{phone_number_c01}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Can not check balance by customer 1 without token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Token expired\",()=>{\r",
									"    var jsonData= pm.response.json();\r",
									"    var message= jsonData.error.message;\r",
									"    pm.expect(message).contains(\"No Token Found!\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "{{secretkeyname}}",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/balance/{{phone_number_c01}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"balance",
								"{{phone_number_c01}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Can not check balance by customer 1 without secret key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Secret key is not given\",()=>{\r",
									"    var jsonData= pm.response.json();\r",
									"    var message= jsonData.error.message;\r",
									"    pm.expect(message).contains(\"Secret auth key validation failure!\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "{{secretkeyname}}",
								"value": "{{secretkey}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/balance/{{phone_number_c01}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"balance",
								"{{phone_number_c01}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Deposit to customer 2 by agent",
			"item": [
				{
					"name": "Send money by agent to customer 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Deposit successful\",()=>{\r",
									"    var jsonData= pm.response.json();\r",
									"    var message= jsonData.message;\r",
									"    console.log(\"message\")\r",
									"    pm.expect(message).contains(\"Deposit successful\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"The transaction id is showing\", function () {\r",
									"   var jsonData= pm.response.json();\r",
									"    var tid = jsonData.trnxId;\r",
									"    pm.expect(tid).not.equal(null)\r",
									"});\r",
									"\r",
									"pm.test(\"The commission is showing\", function () {\r",
									"   var jsonData= pm.response.json();\r",
									"    var cmn = jsonData.commission;\r",
									"    pm.expect(cmn).not.equal(null)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "{{secretkeyname}}",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"{{agentno}}\",\r\n    \"to_account\":\"{{customer02}}\",\r\n    \"amount\":3000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/deposit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Can not send money by agent to customer 2 with insuficient fund",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Insufficient fund\",()=>{\r",
									"    var jsonData= pm.response.json();\r",
									"    var message= jsonData.message;\r",
									"    pm.expect(message).contains(\"Insufficient balance\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 208\", function () {\r",
									"    pm.response.to.have.status(208);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "{{secretkeyname}}",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"{{agentno}}\",\r\n    \"to_account\":\"{{customer02}}\",\r\n    \"amount\":3000000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/deposit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Can not send money by agent to customer 2 without token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Token expired\",()=>{\r",
									"    var jsonData= pm.response.json();\r",
									"    var message= jsonData.error.message;\r",
									"    pm.expect(message).contains(\"No Token Found!\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "{{secretkeyname}}",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"{{agentno}}\",\r\n    \"to_account\":\"{{customer02}}\",\r\n    \"amount\":3000000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/deposit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Can not send money by agent to customer 2 without secret key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Secret key is not given\",()=>{\r",
									"    var jsonData= pm.response.json();\r",
									"    var message= jsonData.error.message;\r",
									"    pm.expect(message).contains(\"Secret auth key validation failure!\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "{{secretkeyname}}",
								"value": "{{secretkey}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"{{agentno}}\",\r\n    \"to_account\":\"{{customer02}}\",\r\n    \"amount\":3000000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/deposit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Payment by customer 2",
			"item": [
				{
					"name": "Payment by customer 2 to merchant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Payment successful\",()=>{\r",
									"    var jsonData= pm.response.json();\r",
									"    var message= jsonData.message;\r",
									"    console.log(\"message\")\r",
									"    pm.expect(message).contains(\"Payment successful\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"The transaction id is showing\", function () {\r",
									"   var jsonData= pm.response.json();\r",
									"    var tid = jsonData.trnxId;\r",
									"    pm.expect(tid).not.equal(null)\r",
									"});\r",
									"\r",
									"pm.test(\"The fee is showing\", function () {\r",
									"   var jsonData= pm.response.json();\r",
									"    var fees = jsonData.fee;\r",
									"    pm.expect(fees).not.equal(null)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "{{secretkeyname}}",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"{{customer02}}\",\r\n    \"to_account\":\"01686606905\",\r\n    \"amount\":50\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/payment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"payment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Can not make payment by customer 2 with insuficient fund",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Insufficient fund\",()=>{\r",
									"    var jsonData= pm.response.json();\r",
									"    var message= jsonData.message;\r",
									"    pm.expect(message).contains(\"Insufficient balance\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 208\", function () {\r",
									"    pm.response.to.have.status(208);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "{{secretkeyname}}",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"{{customer02}}\",\r\n    \"to_account\":\"01686606905\",\r\n    \"amount\":50000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/payment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"payment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Can not make payment by customer 2 without token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Token expired\",()=>{\r",
									"    var jsonData= pm.response.json();\r",
									"    var message= jsonData.error.message;\r",
									"    pm.expect(message).contains(\"No Token Found!\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "{{secretkeyname}}",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"{{customer02}}\",\r\n    \"to_account\":\"01686606905\",\r\n    \"amount\":50000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/payment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"payment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Can not make payment by customer 2 without secret key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Secret key is not given\",()=>{\r",
									"    var jsonData= pm.response.json();\r",
									"    var message= jsonData.error.message;\r",
									"    pm.expect(message).contains(\"Secret auth key validation failure!\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "{{secretkeyname}}",
								"value": "{{secretkey}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"{{customer02}}\",\r\n    \"to_account\":\"01686606905\",\r\n    \"amount\":50000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/payment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"payment"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Customer 2 balance check",
			"item": [
				{
					"name": "Check balance by customer 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User balance\",()=>{\r",
									"    var jsonData= pm.response.json();\r",
									"    var message= jsonData.message;\r",
									"    console.log(\"message\")\r",
									"    pm.expect(message).contains(\"User balance\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The balance is showing\", function () {\r",
									"   var jsonData= pm.response.json();\r",
									"    var balance= jsonData.balance;\r",
									"    pm.expect(balance).not.equal(null)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "{{secretkeyname}}",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/balance/{{phone_number_c02}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"balance",
								"{{phone_number_c02}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Can not check balance by customer 2 without token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Token expired\",()=>{\r",
									"    var jsonData= pm.response.json();\r",
									"    var message= jsonData.error.message;\r",
									"    pm.expect(message).contains(\"No Token Found!\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "{{secretkeyname}}",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/balance/{{phone_number_c02}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"balance",
								"{{phone_number_c02}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Can not check balance by customer 1 without secret key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Secret key is not given\",()=>{\r",
									"    var jsonData= pm.response.json();\r",
									"    var message= jsonData.error.message;\r",
									"    pm.expect(message).contains(\"Secret auth key validation failure!\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "{{secretkeyname}}",
								"value": "{{secretkey}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/balance/{{phone_number_c02}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"balance",
								"{{phone_number_c02}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Statement check by customer 2",
			"item": [
				{
					"name": "Statement check by customer 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Transaction list\",()=>{\r",
									"    var jsonData= pm.response.json();\r",
									"    var message= jsonData.message;\r",
									"    console.log(\"message\")\r",
									"    pm.expect(message).contains(\"Transaction list\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "{{secretkeyname}}",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transaction/statement/{{customer02}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"statement",
								"{{customer02}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Can not check statement check by customer 2 without token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Token expired\",()=>{\r",
									"    var jsonData= pm.response.json();\r",
									"    var message= jsonData.error.message;\r",
									"    pm.expect(message).contains(\"No Token Found!\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "{{secretkeyname}}",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transaction/statement/{{customer02}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"statement",
								"{{customer02}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Can not check statement check by customer 2 without secret key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Secret key is not given\",()=>{\r",
									"    var jsonData= pm.response.json();\r",
									"    var message= jsonData.error.message;\r",
									"    pm.expect(message).contains(\"Secret auth key validation failure!\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "{{secretkeyname}}",
								"value": "{{secretkey}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transaction/statement/{{customer02}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"statement",
								"{{customer02}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Merchant balance check",
			"item": [
				{
					"name": "Check balance by merchant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User balance\",()=>{\r",
									"    var jsonData= pm.response.json();\r",
									"    var message= jsonData.message;\r",
									"    console.log(\"message\")\r",
									"    pm.expect(message).contains(\"User balance\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The balance is showing\", function () {\r",
									"   var jsonData= pm.response.json();\r",
									"    var balance= jsonData.balance;\r",
									"    pm.expect(balance).not.equal(null)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "{{secretkeyname}}",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/balance/01686606905",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"balance",
								"01686606905"
							]
						}
					},
					"response": []
				},
				{
					"name": "Can not check balance by merchant without token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Token expired\",()=>{\r",
									"    var jsonData= pm.response.json();\r",
									"    var message= jsonData.error.message;\r",
									"    pm.expect(message).contains(\"No Token Found!\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "{{secretkeyname}}",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/balance/01686606905",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"balance",
								"01686606905"
							]
						}
					},
					"response": []
				},
				{
					"name": "Can not check balance by merchant without secret key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Secret key is not given\",()=>{\r",
									"    var jsonData= pm.response.json();\r",
									"    var message= jsonData.error.message;\r",
									"    pm.expect(message).contains(\"Secret auth key validation failure!\")\r",
									"})\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "{{secretkeyname}}",
								"value": "{{secretkey}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/balance/01686606905",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"balance",
								"01686606905"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFkbWluMUByb2FkdG9jYXJlZXIubmV0IiwicGFzc3dvcmQiOiIxMjM0IiwiaWF0IjoxNjg1MTczNjEzLCJleHAiOjE2ODUxNzU0MTN9.PbAXSxM4S4-LDCRG7berUs1bm71nEaGpChnzzGWrsCs"
		},
		{
			"key": "phone_number",
			"value": "01506638564"
		},
		{
			"key": "nid",
			"value": "11006638564"
		},
		{
			"key": "baseUrl",
			"value": "http://dmoney.roadtocareer.net",
			"type": "string"
		},
		{
			"key": "phone_number_c01",
			"value": "01506638101"
		},
		{
			"key": "nid_c01",
			"value": "11006638101"
		},
		{
			"key": "phone_number_agent",
			"value": "01506032799"
		},
		{
			"key": "nid_agent",
			"value": "11006032799"
		},
		{
			"key": "phone_number_c02",
			"value": "01507032570"
		},
		{
			"key": "nid-c02",
			"value": "11007032570"
		},
		{
			"key": "nid-agent",
			"value": "11008043258"
		},
		{
			"key": "agentno",
			"value": "01506032799"
		},
		{
			"key": "customer01",
			"value": "01506638101"
		},
		{
			"key": "customer02",
			"value": "01507032570"
		},
		{
			"key": "secretkey",
			"value": "ROADTOSDET",
			"type": "string"
		},
		{
			"key": "secretkeyname",
			"value": "X-AUTH-SECRET-KEY",
			"type": "string"
		}
	]
}